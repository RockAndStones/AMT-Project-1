-- MySQL Script generated by MySQL Workbench
-- Fri Oct  2 15:58:35 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema stoneoverflow-db
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `stoneoverflow-db` ;

-- -----------------------------------------------------
-- Schema stoneoverflow-db
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `stoneoverflow-db` DEFAULT CHARACTER SET utf8 ;
USE `stoneoverflow-db` ;

-- -----------------------------------------------------
-- Table `stoneoverflow-db`.`User`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `stoneoverflow-db`.`User` (
  `id` CHAR(36) NOT NULL,
  `firstName` VARCHAR(45) NULL,
  `lastName` VARCHAR(45) NULL,
  `mail` VARCHAR(45) NULL,
  `username` VARCHAR(45) NULL,
  `password` VARCHAR(100) NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `username_UNIQUE` (`username` ASC) VISIBLE,
  UNIQUE INDEX `mail_UNIQUE` (`mail` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `stoneoverflow-db`.`UserMessage`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `stoneoverflow-db`.`UserMessage` (
  `id` CHAR(36) NOT NULL,
  `idUser` CHAR(36) NOT NULL,
  `description` TEXT NULL,
  `date` DATETIME(3) NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_UserMessage_User1_idx` (`idUser` ASC) VISIBLE,
  CONSTRAINT `fk_UserMessage_User1`
    FOREIGN KEY (`idUser`)
    REFERENCES `stoneoverflow-db`.`User` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `stoneoverflow-db`.`Question`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `stoneoverflow-db`.`Question` (
  `id` CHAR(36) NOT NULL,
  `title` VARCHAR(100) NULL,
  `nbViews` INTEGER NULL,
  `type` INTEGER NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_Question_UserMessage1_idx` (`id` ASC) VISIBLE,
  CONSTRAINT `fk_Question_UserMessage1`
    FOREIGN KEY (`id`)
    REFERENCES `stoneoverflow-db`.`UserMessage` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `stoneoverflow-db`.`Answer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `stoneoverflow-db`.`Answer` (
  `id` CHAR(36) NOT NULL,
  `idQuestion` CHAR(36) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_Answer_Question1_idx` (`idQuestion` ASC) VISIBLE,
  CONSTRAINT `fk_Answer_UserMessage1`
    FOREIGN KEY (`id`)
    REFERENCES `stoneoverflow-db`.`UserMessage` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Answer_Question1`
    FOREIGN KEY (`idQuestion`)
    REFERENCES `stoneoverflow-db`.`Question` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `stoneoverflow-db`.`Comment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `stoneoverflow-db`.`Comment` (
  `id` CHAR(36) NOT NULL,
  `idUser` VARCHAR(36) NOT NULL,
  `idUserMessage` VARCHAR(36) NOT NULL,
  `description` TEXT NULL,
  `date` DATETIME(3) NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_Comment_User1_idx` (`idUser` ASC) VISIBLE,
  CONSTRAINT `fk_Comment_User1`
    FOREIGN KEY (`idUser`)
    REFERENCES `stoneoverflow-db`.`User` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Comment_UserMessage1`
    FOREIGN KEY (`idUserMessage`)
    REFERENCES `stoneoverflow-db`.`UserMessage` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `stoneoverflow-db`.`Vote`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `stoneoverflow-db`.`Vote` (
    `id` CHAR(36) NOT NULL,
    `idUser` VARCHAR(36) NOT NULL,
    `idUserMessage` VARCHAR(36) NOT NULL,
    `voteUp` BOOLEAN NOT NULL,
    PRIMARY KEY (`idUser`, `idUserMessage`),
    INDEX `fk_Vote_User_idx` (`idUser` ASC) VISIBLE,
    CONSTRAINT `fk_Vote_User`
        FOREIGN KEY (`idUser`)
            REFERENCES `stoneoverflow-db`.`User` (`id`)
            ON DELETE NO ACTION
            ON UPDATE NO ACTION,
    CONSTRAINT `fk_Vote_UserMessage`
        FOREIGN KEY (`idUserMessage`)
            REFERENCES `stoneoverflow-db`.`UserMessage` (`id`)
            ON DELETE NO ACTION
            ON UPDATE NO ACTION)
    ENGINE = InnoDB;

CREATE VIEW vQuestion AS
SELECT
    q.id AS 'id',
    q.title AS 'title',
    um.description AS 'description',
    um.idUser AS 'creatorId',
    u.username AS 'creator',
    q.nbViews AS 'nbViews',
    q.type AS 'type',
    ((SELECT COUNT(*) FROM Vote AS v WHERE q.id=v.idUserMessage AND v.voteUp=1)-(SELECT COUNT(*) FROM Vote AS v WHERE q.id=v.idUserMessage AND v.voteUp=0)) AS `nbVotes`,
    um.date AS 'date'
FROM Question AS q
    INNER JOIN UserMessage AS um
        ON q.id = um.id
    INNER JOIN User AS u
        ON um.idUser=u.id;

CREATE VIEW vAnswer AS
SELECT
    a.id AS 'id',
    a.idQuestion AS 'answerTo',
    um.description AS 'description',
    um.idUser AS 'creatorId',
    u.username AS 'creator',
    ((SELECT COUNT(*) FROM Vote AS v WHERE a.id=v.idUserMessage AND v.voteUp=1)-(SELECT COUNT(*) FROM Vote AS v WHERE a.id=v.idUserMessage AND v.voteUp=0)) AS `nbVotes`,
    um.date AS 'date'
FROM Answer AS a
         INNER JOIN UserMessage AS um
                    ON a.id = um.id
         INNER JOIN User AS u
                    ON um.idUser=u.id;

CREATE VIEW vQuestionComment AS
SELECT
    c.id AS `id`,
    c.idUserMessage AS 'commentTo',
    c.idUser AS 'creatorId',
    u.username AS  'creator',
    c.description AS 'description',
    c.date AS 'date'
FROM Comment AS c
         INNER JOIN Question AS q
                    ON c.idUserMessage = q.id
         INNER JOIN User AS u
                    ON c.idUser=u.id;

CREATE VIEW vAnswerComment AS
SELECT
    c.id AS `id`,
    c.idUserMessage AS 'commentTo',
    c.idUser AS 'creatorId',
    u.username AS  'creator',
    c.description AS 'description',
    c.date AS 'date'
FROM Comment AS c
         INNER JOIN Answer AS a
                    ON c.idUserMessage = a.id
         INNER JOIN User AS u
                    ON c.idUser=u.id;

CREATE VIEW vQuestionVote AS
SELECT
    v.id AS `id`,
    v.idUser AS 'votedBy',
    v.idUserMessage AS 'votedObject',
    v.voteUp AS  'voteType'
FROM Vote AS v
         INNER JOIN Question AS q
                    ON v.idUserMessage = q.id;

CREATE VIEW vAnswerVote AS
SELECT
    v.id AS `id`,
    v.idUser AS 'votedBy',
    v.idUserMessage AS 'votedObject',
    v.voteUp AS  'voteType'
FROM Vote AS v
         INNER JOIN Answer AS a
                    ON v.idUserMessage = a.id;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
